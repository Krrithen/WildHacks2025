{"ast":null,"code":"import getFileType from \"./getFileType.js\";\nfunction encodeCharacter(character) {\n  return character.charCodeAt(0).toString(32);\n}\nfunction encodeFilename(name) {\n  let suffix = '';\n  return name.replace(/[^A-Z0-9]/gi, character => {\n    suffix += `-${encodeCharacter(character)}`;\n    return '/';\n  }) + suffix;\n}\n\n/**\n * Takes a file object and turns it into fileID, by converting file.name to lowercase,\n * removing extra characters and adding type, size and lastModified\n */\nexport default function generateFileID(file, instanceId) {\n  // It's tempting to do `[items].filter(Boolean).join('-')` here, but that\n  // is slower! simple string concatenation is fast\n\n  let id = instanceId || 'uppy';\n  if (typeof file.name === 'string') {\n    id += `-${encodeFilename(file.name.toLowerCase())}`;\n  }\n  if (file.type !== undefined) {\n    id += `-${file.type}`;\n  }\n  if (file.meta && typeof file.meta.relativePath === 'string') {\n    id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`;\n  }\n  if (file.data.size !== undefined) {\n    id += `-${file.data.size}`;\n  }\n  if (file.data.lastModified !== undefined) {\n    id += `-${file.data.lastModified}`;\n  }\n  return id;\n}\n\n// If the provider has a stable, unique ID, then we can use that to identify the file.\n// Then we don't have to generate our own ID, and we can add the same file many times if needed (different path)\nfunction hasFileStableId(file) {\n  if (!file.isRemote || !file.remote) return false;\n  // These are the providers that it seems like have stable IDs for their files. The other's I haven't checked yet.\n  const stableIdProviders = new Set(['box', 'dropbox', 'drive', 'facebook', 'unsplash']);\n  return stableIdProviders.has(file.remote.provider);\n}\nexport function getSafeFileId(file, instanceId) {\n  if (hasFileStableId(file)) return file.id;\n  const fileType = getFileType(file);\n  return generateFileID({\n    ...file,\n    type: fileType\n  }, instanceId);\n}","map":{"version":3,"names":["getFileType","encodeCharacter","character","charCodeAt","toString","encodeFilename","name","suffix","replace","generateFileID","file","instanceId","id","toLowerCase","type","undefined","meta","relativePath","data","size","lastModified","hasFileStableId","isRemote","remote","stableIdProviders","Set","has","provider","getSafeFileId","fileType"],"sources":["/Users/krithin/Desktop/WildHacks2025/frontend/node_modules/@uppy/utils/lib/generateFileID.js"],"sourcesContent":["import getFileType from \"./getFileType.js\";\nfunction encodeCharacter(character) {\n  return character.charCodeAt(0).toString(32);\n}\nfunction encodeFilename(name) {\n  let suffix = '';\n  return name.replace(/[^A-Z0-9]/gi, character => {\n    suffix += `-${encodeCharacter(character)}`;\n    return '/';\n  }) + suffix;\n}\n\n/**\n * Takes a file object and turns it into fileID, by converting file.name to lowercase,\n * removing extra characters and adding type, size and lastModified\n */\nexport default function generateFileID(file, instanceId) {\n  // It's tempting to do `[items].filter(Boolean).join('-')` here, but that\n  // is slower! simple string concatenation is fast\n\n  let id = instanceId || 'uppy';\n  if (typeof file.name === 'string') {\n    id += `-${encodeFilename(file.name.toLowerCase())}`;\n  }\n  if (file.type !== undefined) {\n    id += `-${file.type}`;\n  }\n  if (file.meta && typeof file.meta.relativePath === 'string') {\n    id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`;\n  }\n  if (file.data.size !== undefined) {\n    id += `-${file.data.size}`;\n  }\n  if (file.data.lastModified !== undefined) {\n    id += `-${file.data.lastModified}`;\n  }\n  return id;\n}\n\n// If the provider has a stable, unique ID, then we can use that to identify the file.\n// Then we don't have to generate our own ID, and we can add the same file many times if needed (different path)\nfunction hasFileStableId(file) {\n  if (!file.isRemote || !file.remote) return false;\n  // These are the providers that it seems like have stable IDs for their files. The other's I haven't checked yet.\n  const stableIdProviders = new Set(['box', 'dropbox', 'drive', 'facebook', 'unsplash']);\n  return stableIdProviders.has(file.remote.provider);\n}\nexport function getSafeFileId(file, instanceId) {\n  if (hasFileStableId(file)) return file.id;\n  const fileType = getFileType(file);\n  return generateFileID({\n    ...file,\n    type: fileType\n  }, instanceId);\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,kBAAkB;AAC1C,SAASC,eAAeA,CAACC,SAAS,EAAE;EAClC,OAAOA,SAAS,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;AAC7C;AACA,SAASC,cAAcA,CAACC,IAAI,EAAE;EAC5B,IAAIC,MAAM,GAAG,EAAE;EACf,OAAOD,IAAI,CAACE,OAAO,CAAC,aAAa,EAAEN,SAAS,IAAI;IAC9CK,MAAM,IAAI,IAAIN,eAAe,CAACC,SAAS,CAAC,EAAE;IAC1C,OAAO,GAAG;EACZ,CAAC,CAAC,GAAGK,MAAM;AACb;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAASE,cAAcA,CAACC,IAAI,EAAEC,UAAU,EAAE;EACvD;EACA;;EAEA,IAAIC,EAAE,GAAGD,UAAU,IAAI,MAAM;EAC7B,IAAI,OAAOD,IAAI,CAACJ,IAAI,KAAK,QAAQ,EAAE;IACjCM,EAAE,IAAI,IAAIP,cAAc,CAACK,IAAI,CAACJ,IAAI,CAACO,WAAW,CAAC,CAAC,CAAC,EAAE;EACrD;EACA,IAAIH,IAAI,CAACI,IAAI,KAAKC,SAAS,EAAE;IAC3BH,EAAE,IAAI,IAAIF,IAAI,CAACI,IAAI,EAAE;EACvB;EACA,IAAIJ,IAAI,CAACM,IAAI,IAAI,OAAON,IAAI,CAACM,IAAI,CAACC,YAAY,KAAK,QAAQ,EAAE;IAC3DL,EAAE,IAAI,IAAIP,cAAc,CAACK,IAAI,CAACM,IAAI,CAACC,YAAY,CAACJ,WAAW,CAAC,CAAC,CAAC,EAAE;EAClE;EACA,IAAIH,IAAI,CAACQ,IAAI,CAACC,IAAI,KAAKJ,SAAS,EAAE;IAChCH,EAAE,IAAI,IAAIF,IAAI,CAACQ,IAAI,CAACC,IAAI,EAAE;EAC5B;EACA,IAAIT,IAAI,CAACQ,IAAI,CAACE,YAAY,KAAKL,SAAS,EAAE;IACxCH,EAAE,IAAI,IAAIF,IAAI,CAACQ,IAAI,CAACE,YAAY,EAAE;EACpC;EACA,OAAOR,EAAE;AACX;;AAEA;AACA;AACA,SAASS,eAAeA,CAACX,IAAI,EAAE;EAC7B,IAAI,CAACA,IAAI,CAACY,QAAQ,IAAI,CAACZ,IAAI,CAACa,MAAM,EAAE,OAAO,KAAK;EAChD;EACA,MAAMC,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;EACtF,OAAOD,iBAAiB,CAACE,GAAG,CAAChB,IAAI,CAACa,MAAM,CAACI,QAAQ,CAAC;AACpD;AACA,OAAO,SAASC,aAAaA,CAAClB,IAAI,EAAEC,UAAU,EAAE;EAC9C,IAAIU,eAAe,CAACX,IAAI,CAAC,EAAE,OAAOA,IAAI,CAACE,EAAE;EACzC,MAAMiB,QAAQ,GAAG7B,WAAW,CAACU,IAAI,CAAC;EAClC,OAAOD,cAAc,CAAC;IACpB,GAAGC,IAAI;IACPI,IAAI,EAAEe;EACR,CAAC,EAAElB,UAAU,CAAC;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}